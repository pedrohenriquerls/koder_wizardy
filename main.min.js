(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/Users/PedroLima/Development/personal/koder_wizardy/src/js/entities/enemy.js":[function(require,module,exports){
var Utils = require('../utils');
var SkullProfiles = require('../profiles/skulls');

var Enemy = function (sprite) {
  //sprite.body.moves = false;
  sprite.physicsBodyType = Phaser.Physics.ARCADE;
  sprite.body.collideWorldBounds = true

  sprite.target = window.player;

  // Set the pivot point for this sprite to the center
  sprite.anchor.setTo(0.5, 0.5);

  // Enable physics on this object
  sprite.game.physics.enable(sprite, Phaser.Physics.ARCADE);

  // Define constants that affect motion
  sprite.MAX_SPEED = 50; // pixels/second
  sprite.MIN_DISTANCE = 0; // pixels

  sprite.animations.add('walkBottom', [0,1], 10);
  sprite.animations.add('walkTop', [2,3], 10);
  sprite.animations.add('walkRight', [4,5], 10);
  sprite.animations.add('walkLeft', [6,7], 10);
  sprite.animations.add('dead', [8], 0);

  sprite.alive = true
  this.sprite = sprite

  this.profileGenerator()
  var self = this

  sprite.update = function(){
  	if(self.attrsProfile.life <= 0 && this.alive){
      window.globalHud.showFightAction(self.attrsProfile.name, "Has defeated!!")
  		this.alive = false
      sprite.animations.play('dead', 1)
      window.enemyClone.setTexture(sprite.generateTexture())
  		
      setTimeout(function(){
  		  window.enemysKilled++
  		  window.player.clearFightScene()

        sprite.destroy()
      }, 1000)
  	}else{
      var distance = this.game.math.distance(this.x, this.y, this.target.x, this.target.y);
      if(distance <= 45){
        // If the distance > MIN_DISTANCE then move
        if (distance > this.MIN_DISTANCE) {
            // Calculate the angle to the target
            var rotation = this.game.math.angleBetween(this.x, this.y, this.target.x, this.target.y);
            if(rotation > 1)
              this.animations.play('walkBottom', 6);
            else
              this.animations.play('walkTop', 6);

            // Calculate velocity vector based on rotation and this.MAX_SPEED
            this.body.velocity.x = Math.cos(rotation) * this.MAX_SPEED;
            this.body.velocity.y = Math.sin(rotation) * this.MAX_SPEED;
        } else {
            this.body.velocity.setTo(0, 0);
        }
      }else
         this.body.velocity.setTo(0, 0);
    }
  }
}

Enemy.prototype.profileGenerator = function(name){
  var id = Math.round(Utils.rollDice(0, SkullProfiles.length -1))
  var skullProfile = SkullProfiles[id]
	this.attrsProfile = {
    name: skullProfile.name,
    life: skullProfile.life,
    power: skullProfile.power,
    description: skullProfile.description
  }
}

Enemy.prototype.attack = function(callback){
  if(!this.sprite.alive){
    if(callback)
      callback()
    return
  }
    
  window.globalHud.showFightAction(this.attrsProfile.name, "Attack!!")

  var attackOverload = this.attrsProfile.attack
  if(attackOverload){
    attackOverload()
  }else{
    var maxDmg = this.attrsProfile.power
    var dmg = Utils.rollDice(0, maxDmg > 0 ? maxDmg : 1)

    window.player.life -= dmg
  }
  
  window.player.timer.reset()
  if(callback)
    callback()

  window.player.timer.start()
}

module.exports = Enemy;

},{"../profiles/skulls":"/Users/PedroLima/Development/personal/koder_wizardy/src/js/profiles/skulls.js","../utils":"/Users/PedroLima/Development/personal/koder_wizardy/src/js/utils.js"}],"/Users/PedroLima/Development/personal/koder_wizardy/src/js/entities/globalHud.js":[function(require,module,exports){
var GlobalHud = function (game, player, enemy) {
	this.game  = game
	this.group = game.add.group();

	this.player = player
	this.enemy  = enemy

	window.globalHud = this
}

GlobalHud.prototype.getStyle = function(){
	return { font: '24px Wizards Magic', fill: '#fff' }
}

GlobalHud.prototype.playerMessage = function(text){
	if(!this.textBox && !this.broadcastText){
		this.textBox = this.game.add.sprite(0, 0, "boxSprite")
		this.textBox.width = 380
		this.textBox.height = 80

		this.textBox.fixedToCamera = true;
	  this.textBox.cameraOffset.setTo(0, 220);

	  var style = this.getStyle()
		style.font = "10px Arial"

	  this.broadcastText = this.game.add.text(0, 0, "", style);
	  this.broadcastText.fixedToCamera = true;
  	this.broadcastText.cameraOffset.setTo(25, 230);

  	this.textBoxGroup = this.game.add.group();

		this.textBoxGroup.add(this.textBox)
		this.textBoxGroup.add(this.broadcastText)

		this.game.add.existing(this.textBoxGroup);
	}
	this.textBoxGroup.alpha = 1
	this.broadcastText.setText(text)
	this.game.add.tween(this.textBoxGroup).to( { alpha: 0 }, 500, Phaser.Easing.Linear.None, true, 2500, 0, false)
}

GlobalHud.prototype.createPlayerHud = function(){
	var style = this.getStyle()
	style.font = "14px Arial"

	console.log(window.player.life)
	this.life = this.game.add.text(0, 10, "Life: "+window.player.life , style);
	this.enemiesKilled = this.game.add.text(0, 10, "Score: "+ window.enemysKilled, style);

	this.life.fixedToCamera = true;
  this.life.cameraOffset.setTo(0, 30);

  this.enemiesKilled.fixedToCamera = true;
  this.enemiesKilled.cameraOffset.setTo(300, 30);
}

GlobalHud.prototype.updatePlayerHud = function(){
	var style = this.getStyle()
	style.font = "14px Arial"

	this.life.setText("Life: "+Math.round(window.player.life))
	this.enemiesKilled.setText("Score: "+ window.enemysKilled)
}

GlobalHud.prototype.showFightAction = function(actorName, actionName){
	var actionText = actorName+': '+ actionName
	if(!this.actions){
		var style = this.getStyle()
		style.align = "center"
		style.font = "16px Arial"
		this.actions = this.game.add.text(0, 0, actionText, style);

		this.actions.fixedToCamera = true;
  	this.actions.cameraOffset.setTo(110, 100);
	}else
		this.actions.setText(actionText)

	var self = this

  this.actions.alpha = 1
  this.game.add.tween(this.actions).to( { alpha: 0 }, 500, Phaser.Easing.Linear.None, true, 1000, 0, false)
}

GlobalHud.prototype.fightHudDestroy = function(){
	this.actions.destroy()
	this.actions = null
}

module.exports = GlobalHud;
},{}],"/Users/PedroLima/Development/personal/koder_wizardy/src/js/entities/player.js":[function(require,module,exports){
var VisualTimer = require('../vendor/VisualTimer');
var FightSystem = require('../states/fight');

var Player = function (game, x, y) {
  Phaser.Sprite.call(this, game, x, y, 'playerSprites');
  game.physics.arcade.enable(this);

  this.body.collideWorldBounds = true

  this.cursors = game.input.keyboard.createCursorKeys();

  game.add.existing(this);
  game.camera.follow(this);

  this.loadAnimations()

  window.enemysKilled = 0

  this.velocity = 60
  this.fps = 6

  this.fighting = false
  this.loadSkills()

  this.playerClone = null
  this.enemyClone = null

  this.life = 100

  window.player = this
}

Player.prototype = Object.create(Phaser.Sprite.prototype);
Player.prototype.constructor = Player;

/**
 * Automatically called by World.update
 */
Player.prototype.update = function() {
  //player movement

  this.body.velocity.y = 0;
  this.body.velocity.x = 0;

  if(window.player.fighting || this.fighting)
    return

  if(this.cursors.up.isDown) {
    this.body.velocity.y -= this.velocity;
    this.animations.play('walkTop', this.fps);
  }
  else if(this.cursors.down.isDown) {
    this.body.velocity.y += this.velocity;
    this.animations.play('walkBottom', this.fps);
  }
  if(this.cursors.left.isDown) {
    this.body.velocity.x -= this.velocity;
    this.animations.play('walkLeft', this.fps);
  }
  else if(this.cursors.right.isDown) {
    this.body.velocity.x += this.velocity;
    this.animations.play('walkRight', this.fps);
  }
}

Player.prototype.addCollider = function(game, layer){
  game.physics.arcade.collide(this, layer);
}

Player.prototype.loadAnimations = function(){
  this.animations.add('walkBottom', [0,1], 10);
  this.animations.add('walkTop', [2,3], 10);
  this.animations.add('walkRight', [4,5], 10);
  this.animations.add('walkLeft', [6,7], 10);
}

Player.prototype.loadSkills = function(){
  window.playerSkills = {
    debug: function(enemy){
      var style = { font: "10px Arial", fill: "#fff"};
      var game = window.player.game
      var t = game.add.text(0, 0, JSON.stringify(enemy, null, " "), style);
      t.fixedToCamera = true;
      t.cameraOffset.setTo(0, 40);

      game.add.tween(t).to( { alpha: 0 }, 2000, Phaser.Easing.Linear.None, true, 5000, 0, false).onUpdateCallback(function(){
        window.setTimeout(function(){
          t.destroy()  
        }, 2000)
      });
    }
  }
}

Player.prototype.fight = function(player, enemy){
  if(window.player.fighting == true)
    return

  window.player.fighting = true
  
  var game = player.game

  //var arena = new Phaser.Rectangle(150, player.y, 150, 200);
  //arena.fill('#0fffff')
  player.animations.play('walkRight', this.fps);
  window.playerClone = game.add.sprite(0, 0, player.generateTexture());
  window.playerClone.scale.x = window.playerClone.scale.y = 2
  window.playerClone.fixedToCamera = true;
  window.playerClone.cameraOffset.setTo(100, 180);
  
  enemy.animations.play('walkLeft', this.fps);
  window.enemyClone  = game.add.sprite(0, 0, enemy.generateTexture());
  window.enemyClone.scale.x = window.enemyClone.scale.y = 2
  window.enemyClone.fixedToCamera = true;
  window.enemyClone.cameraOffset.setTo(250, 180);

  var fightSystem = new FightSystem(player, enemy)
  fightSystem.createQuest()

  setTimeout(function(){
    window.player.timer = new VisualTimer({
      game: game,
      x: 110,
      y: 20,
      seconds: 30,
      onComplete: function() {
        fightSystem.disableKoderify()
        setTimeout(function(){
          enemy.instance.attack(fightSystem.enableKoderify)
        }, 1000)
      }
    });

    player.visible = false
    enemy.visible = false

    window.currentEnemy = enemy.instance.attrsProfile
    fightSystem.createEditor()

    window.player.timer.start()
  }, 2000)
}

Player.prototype.clearFightScene = function(){
  window.playerClone.destroy()
  window.enemyClone.destroy()
  window.player.timer.destroy()
  this.visible = true
  this.fighting = false
  window.globalHud.fightHudDestroy()
}



module.exports = Player;

},{"../states/fight":"/Users/PedroLima/Development/personal/koder_wizardy/src/js/states/fight.js","../vendor/VisualTimer":"/Users/PedroLima/Development/personal/koder_wizardy/src/js/vendor/VisualTimer.js"}],"/Users/PedroLima/Development/personal/koder_wizardy/src/js/main.js":[function(require,module,exports){
'use strict';

var game = new Phaser.Game(800, 600, Phaser.AUTO, 'mage-knight-game');

window.Utils = require('./utils');
window.playerState = {
    currentLevel: 'Game'
}

game.state.add('Boot', require('./states/boot'));
game.state.add('Splash', require('./states/splash'));
game.state.add('Preloader', require('./states/preloader'));
game.state.add('Menu', require('./states/menu'));
game.state.add('Game', require('./states/game'));
game.state.add('Fight', require('./states/fight'));

game.state.start('Boot');

},{"./states/boot":"/Users/PedroLima/Development/personal/koder_wizardy/src/js/states/boot.js","./states/fight":"/Users/PedroLima/Development/personal/koder_wizardy/src/js/states/fight.js","./states/game":"/Users/PedroLima/Development/personal/koder_wizardy/src/js/states/game.js","./states/menu":"/Users/PedroLima/Development/personal/koder_wizardy/src/js/states/menu.js","./states/preloader":"/Users/PedroLima/Development/personal/koder_wizardy/src/js/states/preloader.js","./states/splash":"/Users/PedroLima/Development/personal/koder_wizardy/src/js/states/splash.js","./utils":"/Users/PedroLima/Development/personal/koder_wizardy/src/js/utils.js"}],"/Users/PedroLima/Development/personal/koder_wizardy/src/js/profiles/skulls.js":[function(require,module,exports){
var SkullProfiles = [
	{
		name: "Zombineia",
    life: 20,
    power: 20,
    description: "Human hatred and enjoys long walks in the moonlight."
	},
	{
		name: "ZuZumba",
    life: 20,
    power: 20,
    description: "Like to eat brains."
	},
	{
		name: "Zombirasta",
    life: 20,
    power: 20,
    description: "Eat brains to feel alive again :)."
	},
	{
		name: "Zombie",
    life: 20,
    power: 20,
    description: "Brains!! Your brain is mine."
	},
	{
		name: "Rob Zombe",
    life: 60,
    power: 50,
    description: "It`s a autor of worst songs =S."
	},
	{
		name: "Zigurat",
    life: 10,
    power: 1,
    description: "ZZZzzz."
	}
]

module.exports = SkullProfiles
},{}],"/Users/PedroLima/Development/personal/koder_wizardy/src/js/profiles/tutorials.js":[function(require,module,exports){
var Tutorials = [
	'Yoda about JS: The Javascript a powerful ally it is. Brendan creates it,\n makes it grow. Its energy surrounds us and binds us. Objects beings are\nwe, not this crude matter. You must debug the Objects around you; here,\nbetween you, me, the nodejs, the jquery, everywhere, yes.\n',
	'Like Yoda told ya, this first fight is only about objects, try debug\nyour enemies(debug(enemy)).\nFind a away to defeat him, using the power of Javascript.\n Tip: enemy.name = "blastoise"\n'
]

module.exports = Tutorials
},{}],"/Users/PedroLima/Development/personal/koder_wizardy/src/js/states/boot.js":[function(require,module,exports){
var Boot = function () {};

module.exports = Boot;

Boot.prototype = {

  preload: function () {
    this.load.image('preloader', 'assets/preloader.gif');
  },

  create: function () {
    if (this.game.device.desktop) {
      this.scale.scaleMode = Phaser.ScaleManager.EXACT_FIT;
      //this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
      this.scale.setGameSize(400, 300);
    } else {
      this.game.stage.scaleMode = Phaser.StageScaleMode.SHOW_ALL;
      this.game.stage.scale.minWidth =  480;
      this.game.stage.scale.minHeight = 260;
      this.game.stage.scale.maxWidth = 640;
      this.game.stage.scale.maxHeight = 480;
      this.game.stage.scale.forceLandscape = true;
      this.game.stage.scale.pageAlignHorizontally = true;
      this.game.stage.scale.setScreenSize(true);
    }

    //physics system
    this.game.physics.startSystem(Phaser.Physics.ARCADE);

    this.game.state.start('Preloader');
  }
};

},{}],"/Users/PedroLima/Development/personal/koder_wizardy/src/js/states/fight.js":[function(require,module,exports){
var Tutorials = require('../profiles/tutorials');
var FightSystem = function (player, enemy) {
  this.player = player
  this.enemy  = enemy
}
var suggestions = [
  {name: 'if', value: 'if', score: '1', meta: 'keyword'},
  {name: 'else', value: 'else', score: '1', meta: 'keyword'},
  {name: 'for', value: 'for', score: '1', meta: 'keyword'},
  {name: 'switch', value: 'switch', score: '1', meta: 'keyword'},
  {name: 'case', value: 'case', score: '1', meta: 'keyword'},
];
var executeLabel = null
FightSystem.prototype.createEditor = function(){
  ace.require("ace/ext/language_tools");
  this.editor = ace.edit("editor");
  this.editor.setOptions({enableBasicAutocompletion: true});
  this.editor.setFocus = function(){
    this.focus()
    session = this.getSession();
    var count = session.getLength();
    //Go to end of the last line
    this.gotoLine(count, session.getLine(count-1).length);
  }

  var completer = {
    getCompletions: function(editor, session, pos, prefix, callback) {
      for (var param in window.playerSkills) {
        if (window.playerSkills.hasOwnProperty(param)) {
          suggestions.push({name: param, value: param, score: '1', meta: 'spell'});
        }
      }
      callback(null, suggestions);
    }
  };

  this.editor.completers = [completer];
  this.editor.getSession().setMode("ace/mode/javascript");
  window.editor = this.editor;

  executeLabel = this.player.game.add.text(0, 0, 'Koderify!!', { font: '24px Wizards Magic', fill: '#fff' });
  executeLabel.inputEnabled = true;
  executeLabel.events.onInputUp.add(this.execute)
  
  executeLabel.fixedToCamera = true;
  executeLabel.cameraOffset.setTo(280, 260);
  //this.executeLabel = executeLabel

	if(this.editor.getValue().trim() == "")
  	this.basicCode()
}

FightSystem.prototype.createQuest = function(){
  var text = Tutorials[window.enemysKilled + 1]
  if(text)
    window.globalHud.playerMessage(text)
}

FightSystem.prototype.enableKoderify = function() {
  //window.editor.setFocus()
  executeLabel.inputEnabled = true
  executeLabel.setStyle({font: '24px Wizards Magic', fill: '#fff'});

}

FightSystem.prototype.disableKoderify = function() {
  executeLabel.inputEnabled = false
  executeLabel.setStyle({font: '24px Wizards Magic', fill: '#777'});
}

FightSystem.prototype.execute = function(){
	var self = this
	var code = this.editor.getValue();

	var worldThings = {
		enemy: self.currentEnemy,
		skills: self.playerSkills,
    debug: new Object(self.playerSkills.debug),
    window: {},
    document: {}
	}

	var params = [];
  var args = [];

  var sadboxMock = Object.create(null);

  for (var param in worldThings) {
    if (worldThings.hasOwnProperty(param)) {
      args.push(worldThings[param]);
      params.push(param);
    }
  }

  var context = Array.prototype.concat.call(sadboxMock, params, code); // create the parameter list for the sandbox
  var sandbox = new (Function.prototype.bind.apply(Function, context)); // create the sandbox function
  context = Array.prototype.concat.call(sadboxMock, args); // create the argument list for the sandbox

  var sandboxFunction = Function.prototype.bind.apply(sandbox, context); // bind the local variables to the sandbox
  try{
    sandboxFunction()  
  }catch(e){
    window.globalHud.playerMessage("Error: "+e)
  }
  
}

FightSystem.prototype.basicCode = function(){
	this.editor.insert("//You are the greater master of creation and destruction here\n")
  this.editor.insert("//Change enemies attributes and create new spells\n")
  this.editor.insert("//Ctrl+Space for use the power of autocomplete\n")
  this.editor.insert("")
  this.editor.setFocus()
}

module.exports = FightSystem;
},{"../profiles/tutorials":"/Users/PedroLima/Development/personal/koder_wizardy/src/js/profiles/tutorials.js"}],"/Users/PedroLima/Development/personal/koder_wizardy/src/js/states/game.js":[function(require,module,exports){
var Player = require('../entities/player');
var Enemy = require('../entities/enemy');
var GlobalHud    = require('../entities/globalHud');
var Tutorials = require('../profiles/tutorials');

var Game = function () {
  this.player = null;
};

module.exports = Game;

Game.prototype = {

  create: function () {
    this.map = this.game.add.tilemap('level1');

    this.map.addTilesetImage('stone_bricks', 'scenarioSprites');
    this.map.addTilesetImage('weapons_spells_torch_key_gems', 'objectsSprites');
    this.map.addTilesetImage('Players', 'playerSprites');
    this.map.addTilesetImage('monsters', 'monstersSprites');

    //create layer
    this.groundLayer = this.map.createLayer('groundLayer');
    this.blockedLayer = this.map.createLayer('blockedLayer');
    
    //collision on blockedLayer
    this.map.setCollisionBetween(1, 2000, true, 'blockedLayer');

    var playerPosition = this.findObjectsByType('playerStart', this.map, 'playerLayer')
    this.player = new Player(this.game, playerPosition[0].x, playerPosition[0].y)  

    /** Spawning Skulls **/
    this.skulls = this.game.add.group();

    this.skulls.enableBody = true;
    this.skulls.instances = []

    var skulls = this.findObjectsByType('skull', this.map, 'enemiesLayer')
    skulls.forEach(function(skull){
      var _skull = this.skulls.create(skull.x, skull.y, "monstersSprites")

      Object.keys(skull.properties).forEach(function(key){
        _skull[key] = skull.properties[key];
      });
      _skull.instance = new Enemy(_skull)
    }, this)
    
    this.blockedLayer.resizeWorld();

    this.shadowTexture = this.game.add.bitmapData(this.game.width, this.game.height);
    this.lightSprite = this.game.add.image(this.game.camera.x, this.game.camera.y, this.shadowTexture);

    this.lightSprite.blendMode = Phaser.blendModes.MULTIPLY;

    this.globalHud = new GlobalHud(this.game, this.player)
    this.globalHud.createPlayerHud()

    window.globalHud.playerMessage(Tutorials[0])
  },

  update: function(){
    if(window.player.life <= 0){
      //window.player.destroy()
      var t = this.game.add.text(0, 0, "Game Over", { font: "30px Arial", fill: "#fff"});
      t.fixedToCamera = true;
      t.cameraOffset.setTo(100, 150);

      var self = this

      setTimeout(function(){
        self.game.state.start("Menu");
      }, 500)
    }


    this.player.addCollider(this.game, this.blockedLayer)
    this.game.physics.arcade.overlap(this.player, this.skulls, this.player.fight, null, this);
    this.globalHud.updatePlayerHud()

    this.updateShadowTexture();   
    this.lightSprite.reset(this.game.camera.x, this.game.camera.y);
  },
  updateShadowTexture: function(){
    // Draw shadow
    this.shadowTexture.context.fillStyle = 'rgb(10, 10, 10)';
    this.shadowTexture.context.fillRect(0, 0, this.game.width, this.game.height);

    var radius = 50 + this.game.rnd.integerInRange(1,5),
        heroX = this.player.x - this.game.camera.x + 9,
        heroY = this.player.y - this.game.camera.y + 10;
    if(this.player.fighting){
      heroX = heroY = 1000
    }
   
    // Draw circle of light with a soft edge
    var gradient =
        this.shadowTexture.context.createRadialGradient(
            heroX, heroY, 40 * 0.75,
            heroX, heroY, radius);
    gradient.addColorStop(0, 'rgba(255, 255, 255, 1.0)');
    gradient.addColorStop(1, 'rgba(255, 255, 255, 0.0)');

    this.shadowTexture.context.beginPath();
    this.shadowTexture.context.fillStyle = gradient;
    this.shadowTexture.context.arc(heroX, heroY, radius, 0, Math.PI*2, false);
    this.shadowTexture.context.fill();

    this.shadowTexture.dirty = true;
  },

  findObjectsByType: function(type, map, layer) {
    var result = new Array();
    map.objects[layer].forEach(function(element){
      if(element.properties.type === type) {
        element.y -= map.tileHeight;
        result.push(element);
      }      
    });
    return result;
  }
};

},{"../entities/enemy":"/Users/PedroLima/Development/personal/koder_wizardy/src/js/entities/enemy.js","../entities/globalHud":"/Users/PedroLima/Development/personal/koder_wizardy/src/js/entities/globalHud.js","../entities/player":"/Users/PedroLima/Development/personal/koder_wizardy/src/js/entities/player.js","../profiles/tutorials":"/Users/PedroLima/Development/personal/koder_wizardy/src/js/profiles/tutorials.js"}],"/Users/PedroLima/Development/personal/koder_wizardy/src/js/states/menu.js":[function(require,module,exports){
var Menu = function () {
  this.text = null;
};

module.exports = Menu;

Menu.prototype = {

  create: function () {
    var x = this.game.width / 2;
    var y = this.game.height / 2;
    this.stage.backgroundColor = '#4b0049'

    var title = this.add.text(40, 20, "Koder Wizardy", { font: "50px Wizards Magic", fill: "#ffffff", align: "center" });

    var start = this.add.text(140, 200, "Press to Start", { font: "16px Wizards Magic", fill: "#ffffff", align: "center" });
    //var instructions = this.add.text(150, 250, "Instructions", { font: "16px Wizards Magic", fill: "#ffffff", align: "center" });
    
    //start.inputEnabled = true
    //start.events.onInputUp.add(this.onDown)
    this.input.onDown.add(this.onDown, this);

    //instructions.inputEnabled = true
    //instructions.events.onInputUp.add(this.gotoInstructions)
  },

  update: function () {
  },

  onDown: function () {
    this.game.state.start("Game");
  },
  gotoInstructions: function(){
    
  }
};

},{}],"/Users/PedroLima/Development/personal/koder_wizardy/src/js/states/preloader.js":[function(require,module,exports){
var Preloader = function (game) {
  this.asset = null;
  this.ready = false;
};

module.exports = Preloader;

Preloader.prototype = {

  preload: function () {
    this.asset = this.add.sprite(100, 240, 'preloader');
    this.asset.anchor.setTo(0.5, 0.5);

    this.load.onLoadComplete.addOnce(this.onLoadComplete, this);
    this.load.setPreloadSprite(this.asset);
    //this.load.image('testsprite', 'assets/test.png');

    this.load.tilemap('level1', 'assets/maps/first_map.json', null, Phaser.Tilemap.TILED_JSON);
    this.load.image('scenarioSprites', 'assets/images/blockLayer/stone_bricks.png');
    this.load.image('objectsSprites', 'assets/images/weapons_spells_torch_key_gems.png');
    this.load.image('boxSprite', 'assets/images/gui/box-highres.png');

    this.load.spritesheet('playerSprites', 'assets/images/players-mages.png', 16, 16);
    this.load.spritesheet('monstersSprites', 'assets/images/zombie.png', 16, 16);
    this.load.spritesheet('timer', 'assets/images/timer.png', 150, 20);
  },

  create: function () {
    this.asset.cropEnabled = false;
  },

  update: function () {
    if (!!this.ready) {
      this.game.state.start('Menu');
    }
  },

  onLoadComplete: function () {
    this.ready = true;
  }
};

},{}],"/Users/PedroLima/Development/personal/koder_wizardy/src/js/states/splash.js":[function(require,module,exports){
var Splash = function () {
};

module.exports = Splash;

Splash.prototype = {
  create: function () {
  }
};
},{}],"/Users/PedroLima/Development/personal/koder_wizardy/src/js/utils.js":[function(require,module,exports){
var Utils = {
    containsObject: function(obj, list) {
        var i;
        for (i = 0; i < list.length; i++) {
            if (list[i] === obj) {
                return true;
            }
        }

        return false;
    },
    rollDice: function(min, max){
    	return Math.round(Math.random() * (max - min) + min)
    }

};

module.exports = Utils;
},{}],"/Users/PedroLima/Development/personal/koder_wizardy/src/js/vendor/VisualTimer.js":[function(require,module,exports){

var timerTick = function() {
		/*jshint validthis:true */
		if(!this.timer)
			return
		var myTime = (this.type == 'down') ? this.remainingTime() : this.timer.seconds;
		this.rect.width = Math.max(0, (myTime / this.totalTime) * this.fullWidth);
		this.sprite.crop(this.rect);
	}

var VisualTimer = function(opts) {
		this.destroyed = false
		this.type = 'down';
		if (opts.type) {
			this.type = opts.type;
		}
		this.totalTime = opts.seconds;
		this.game = opts.game;
		this.onComplete = opts.onComplete;
		var key = 'timer';
		if (opts.key) {
			key = opts.key;
		}
		this.empty = this.game.add.sprite(0, 0, key, 1);
		this.empty.fixedToCamera = true;
  	this.empty.cameraOffset.setTo(opts.x, opts.y);

		this.sprite = this.game.add.sprite(0, 0, key, 0);
		this.sprite.fixedToCamera = true;
  	this.sprite.cameraOffset.setTo(opts.x, opts.y);
		
		this.fullWidth = this.sprite.width;
		this.reset();
	}

	VisualTimer.prototype = {
		reset: function() {
			console.log(this.destroyed)
			if(this.destroyed)
				return

			if (this.timer) {
				this.timer.stop();
			}

			var self = this;
			this.hasFinished = false;
			this.timer = this.game.time.create(true);
			this.timer.repeat(Phaser.Timer.SECOND, this.totalTime, timerTick, this);
			this.timer.onComplete.add(function() {
				self.hasFinished = true;
				if (self.onComplete) {
					self.onComplete();
				}
			});
			this.rect = new Phaser.Rectangle(0, 0, 0, this.sprite.height);
			if (this.type == 'down') {
				this.sprite.crop(null);
			} else {
				this.sprite.crop(this.rect);
			}
		},

		destroy: function(){
			this.timer = null
			this.destroyed = true

			this.sprite.destroy()
			this.empty.destroy()
		},

		setTime: function(seconds) {
			this.totalTime = seconds;
			this.reset();
		},

		start: function() {
			if(this.destroyed)
				return
			this.reset();
			this.timer.start();
		},

		stop: function() {
			this.timer.stop();
		},

		pause: function() {
			this.timer.pause();
		},

		resume: function() {
			this.timer.resume();
		},

		remainingTime: function() {
			return this.totalTime - this.timer.seconds;
		}
	};


	


module.exports = VisualTimer;

},{}]},{},["/Users/PedroLima/Development/personal/koder_wizardy/src/js/main.js"])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
